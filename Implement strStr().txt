class Solution {
    void precompute(char *a, vector<int> &next, int n)
    {
    	next[0] = -1;
		int j = -1;
		for (int i = 1; i < n; ++i) {
			while (j >= 0 && a[i] != a[j]) {
				j = next[j];
			}
			if (a[i] == a[j + 1])
				j++;
			next[i] = j;
		}
	}
public:
    char *strStr(char *haystack, char *needle) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int m = strlen(needle);
        int n = strlen(haystack);
        
        if (needle == NULL || haystack == NULL || n < m)
        	return NULL;
        
        if (n == 0 || m == 0) {
        	return haystack;
        }
        vector<int>next(m);
        precompute(needle, next, m);
        int j = -1;
        for (int i = 0; i < n; ++i) {
        	while (j >= 0 && needle[j + 1] != haystack[i]) {
        		j = next[j];
        	}
        	if (needle[j + 1] == haystack[i]) {
        		j++;
        	}
        	if (j == m - 1) {
        		return &haystack[i - m + 1];
        	}
        }
        return NULL;
    }
};