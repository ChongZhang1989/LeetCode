class Solution {
	struct Node {
		string s;
		int h, g;
		Node() : h(0), g(0) {}
		Node(string _s, int _h, int _g) : s(_s), h(_h), g(_g) {}
		bool operator < (const Node &b) const
		{
			return (h + g) > (b.h + b.g);
		}
	};
	int eval(string &a, string &b)
	{
		int cnt = 0;
		for (int i = 0; i < a.size(); ++i) {
			if (a[i] != b[i])
				cnt++;
		}
		return cnt;
	}
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        priority_queue<Node>q;
    	q.push(Node(start, 0, 0));
    	unordered_set<string> rec;
    	rec.insert(start);
    	while (!q.empty()) {
    		Node tmp = q.top();
    		q.pop();
    		for (int i = 0; i < tmp.s.size(); ++i) {
    			string t = tmp.s;
    			for (int j = 0; j < 26; ++j) {
    				t[i] = 'a' + j;
    				if (dict.count(t) && !rec.count(t)) {
    					if (t == end) {
    						return tmp.g + 2;
    					}
    					rec.insert(t);
    					Node newnode;
    					newnode.s = t;
    					newnode.g = tmp.g + 1;
    					newnode.h = eval(t, end);
    					q.push(newnode);
    				}
    			}
    		}
    	}
    	return 0;
    }
};