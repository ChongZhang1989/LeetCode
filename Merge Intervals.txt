/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
    static bool cmp(const Interval &a, const Interval &b)
	{
		if (a.start == b.start)
			return a.end < b.end;
		return a.start < b.start;
	}
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
    	vector<Interval>ans;
    	if (intervals.size() == 0)
    		return ans;
        sort(intervals.begin(), intervals.end(), cmp);
        int x = intervals[0].start;
        int y = intervals[0].end;
        for (int i = 1; i < intervals.size(); ++i) {
        	if (y >= intervals[i].start) {
        		y = max(y, intervals[i].end);
        	} else {
        		ans.push_back(Interval(x, y) );
        		x = intervals[i].start;
        		y = intervals[i].end;
        	}
        }
        ans.push_back(Interval(x, y) );
        return ans;
    }
};