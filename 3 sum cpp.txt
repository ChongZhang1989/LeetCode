class Solution {
	class keyhash {
	public:
		size_t operator () (const vector<int> &v) const
		{
			return hash<int>() ((((v[0] << 1) ^ v[1]) << 1) ^ v[2]);
		}
	};
	class keyequal {
	public:
		bool operator () (const vector<int> &a, const vector<int> &b) const
		{
			return a[0] == b[0] && a[1] == b[1] && a[2] == b[2];
		}
	};
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        vector<vector<int> >ans;
        unordered_set<vector<int>, keyhash, keyequal>rec;
        int n = num.size();
        sort(num.begin(), num.end());
        for (int i = 0; i < n; ++i) {
        	int l = i + 1;
        	int r = n - 1;
        	while (l < r) {
        		int sum = num[i] + num[l] + num[r];
        		if (sum == 0) {
        			int tmp[] = {num[i], num[l], num[r]};
        			rec.insert(vector<int>(tmp, tmp + 3));
        			l++;
        		} else if (sum < 0) {
        			l++;
        		} else {
        			r--;
        		}
        	}
        }
        unordered_set<vector<int>, keyhash, keyequal>::iterator it;
        for (it = rec.begin(); it != rec.end(); ++it) {
        	ans.push_back(*it);
        }
        return ans;
    }
};