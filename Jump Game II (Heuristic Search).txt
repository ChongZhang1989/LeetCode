class Solution {
    struct node {
		int step;
		int pos;
		node(int p, int s) : pos(p), step(s) {}
		bool operator < (const node &b) const
		{
			if (step == b.step)
				return pos < b.pos;
			return step > b.step;
		}
	};
public:
    int jump(int A[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (n <= 1)
        	return 0;
        vector<int>rec(n, 0);
        priority_queue<node>q;
        int *a = A;
        q.push(node(0, 0));
        rec[0] = 1;
        while (!q.empty()) {
        	node p = q.top();
        	q.pop();
        	for (int i = p.pos + 1; i <= p.pos + a[p.pos]; ++i) {
        		if (i >= n - 1) {
        			return p.step + 1;
        		}
        		if (!rec[i]) {
        			q.push(node(i, p.step + 1));
        			rec[i] = 1;
        		}
        	}
        }
        return -1;
    }
};