class Solution {
    #define EMPTY 1
    #define SYMBOL 2
    int is_num(string &s, int l, int r, int flg)
    {
        if (l > r) {
            if (flg & EMPTY) return 1;
            return 0;
        }
        int start = l;
        if (s[start] == '+' || s[start] == '-') {
            if (flg & SYMBOL) start++;
            else return 0;
        }
        if (start > r && !(flg & EMPTY)) return 0;
        for (int i = start; i <= r; ++i)
            if (!(s[i] >= '0' && s[i] <= '9'))
                return 0;
        return 1;
    }
public:
    bool isNumber(const char *s) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if (!s || !(*s)) return false;
        string t = "";
        int l = 0;
        for (int i = 0; s[i]; ++i) {
            if (s[i] != ' ') {
                l = i;
                break;
            }
        }
        int r = -1;
        for (int i = strlen(s) - 1; i >= 0; --i) {
            if (s[i] != ' ') {
                r = i;
                break;
            }
        }
        for (int i = l; i <= r; ++i) t += s[i];
        int dot = -1, e = -1;
        for (int i = 0; i < t.size(); ++i) {
            if (t[i] == '.') {
                dot = i;
            }
            if (t[i] == 'e') {
                e = i;
            }
        }
        int ans = 1;
        if (e != -1 && dot != -1) {
            ans &= is_num(t, dot + 1, e - 1, EMPTY);
            ans &= is_num(t, 0, dot - 1, e - dot > 1 ? EMPTY | SYMBOL : SYMBOL);
            ans &= is_num(t, e + 1, t.size() - 1, SYMBOL);
        } else if (e == -1 && dot != -1) {
            ans &= is_num(t, dot + 1, t.size() - 1, EMPTY);
            ans &= is_num(t, 0, dot - 1, t.size() - dot > 1 ? EMPTY | SYMBOL : SYMBOL);
        } else if (dot == -1 && e != -1) {
            ans &= is_num(t, 0, e - 1, SYMBOL);
            ans &= is_num(t, e + 1, t.size() - 1, SYMBOL);
        } else {
            ans &= is_num(t, 0, t.size() - 1, SYMBOL);
        }
        return ans;
    }
};