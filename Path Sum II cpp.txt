/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> >vv;
    void find(TreeNode *root, int sum, vector<int>v)
    {
        if (root == NULL) {
            return;
        }
        if (root->left == NULL && root->right == NULL) {
            if (root->val == sum) {
                v.push_back(root->val);
                vv.push_back(v);
            }
            return;
        }
        v.push_back(root->val);
        find(root->left, sum - root->val, v);
        find(root->right, sum - root->val, v);
    }
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int>v;
        v.clear();
        vv.clear();
        find(root, sum, v);
        return vv;
    }
};