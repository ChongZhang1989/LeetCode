class Solution {
	bool solve(string &s1, string &s2, int l1, int r1, int l2, int r2)
	{
		if (s1.substr(l1, r1 - l1 + 1) == s2.substr(l2, r2 - l2 + 1)) return true;
		int hash[256] = {0};
		int cnt = 0;
		bool flg = false;
		for (int i = 0; i < r1 - l1; ++i) {
			hash[s1[i + l1]]++;
			if (hash[s1[i + l1]] == 0) {
				cnt--;
			} else if (hash[s1[i + l1]] == 1) {
				cnt++;
			}
			hash[s2[i + l2]]--;
			if (hash[s2[i + l2]] == 0) {
				cnt--;
			} else if (hash[s2[i + l2]] == -1) {
				cnt++;
			}
			if (cnt == 0) {
				flg = flg || (solve(s1, s2, l1, i + l1, l2, i + l2) && solve(s1, s2, i + 1 + l1, r1, i + 1 + l2, r2));
			}
		}
		cnt = 0;
		memset(hash, 0, sizeof(hash));
		for (int i = 0; i < r1 - l1; ++i) {
			hash[s1[i + l1]]++;
			if (hash[s1[i + l1]] == 0) {
				cnt--;
			} else if (hash[s1[i + l1]] == 1) {
				cnt++;
			}
			hash[s2[r2 - i]]--;
			if (hash[s2[r2 - i]] == 0) {
				cnt--;
			} else if (hash[s2[r2 - i]] == -1) {
				cnt++;
			}
			if (cnt == 0) {
				flg = flg || (solve(s1, s2, l1, l1 + i, r2 - i, r2) && solve(s1, s2, l1 + i + 1, r1, l2, r2 - i - 1));
			}
		}
		return flg;
	}
public:
    bool isScramble(string s1, string s2) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if (s1.size() != s2.size())
        	return false;
        if (s1.size() == 0)
        	return true;
        int n = s1.size();
        int hash[256] = {0};
        for (int i = 0; i < n; ++i) {
        	hash[s1[i]]++;
        	hash[s2[i]]--;
        }
        for (int i = 0; i < 256; ++i) {
        	if (hash[i])
        		return false;
        }
        return solve(s1, s2, 0, n - 1, 0, n - 1);
    }
};