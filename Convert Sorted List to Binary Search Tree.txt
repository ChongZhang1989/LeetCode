/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
	TreeNode *solve(ListNode *&head, int l, int r)
	{
		if (l > r) return NULL;
		int mid = (l + r) / 2;
		TreeNode *left = solve(head, l, mid - 1);
		TreeNode *root = new TreeNode(head->val);
		head = head->next;
		root->left = left;
		root->right = solve(head, mid + 1, r);
		return root;
	}
public:
    TreeNode *sortedListToBST(ListNode *head) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        int n = 0;
        ListNode *p = head;
        while (p) {
        	p = p->next;
        	n++;
        }
        TreeNode *tree = solve(head, 0, n - 1);
        return tree;
    }
};