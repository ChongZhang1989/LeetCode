class Solution {
	void give(vector<vector<int> > &g, vector<int> &c, int start)
	{
		for (int i = 0; i < g[start].size(); ++i) {
			c[g[start][i]] = max(c[g[start][i]], c[start] + 1);
			give(g, c, g[start][i]);
		}
	}
public:
    int candy(vector<int> &ratings) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
    	int n = ratings.size();
    	vector<vector<int> >g(n);
    	vector<int>in(n, 0);
    	for (int i = 0; i < ratings.size() - 1; ++i) {
    		if (ratings[i] < ratings[i + 1]) {
    			g[i].push_back(i + 1);
    			in[i + 1]++;
    		} else if (ratings[i] > ratings[i + 1]) {
    			g[i + 1].push_back(i);
    			in[i]++;
    		}
    	}
    	
    	vector<int>c(n, 1);
    	for (int i = 0; i < n; ++i) {
    		if (in[i] == 0) {
    			give(g, c, i);
    		}
    	}
    	int sum = 0;
    	for (int i = 0; i < n; ++i) {
    		sum += c[i];
    	}
    	return sum;
    }
};