class Solution {
    void get_prime(vector<int> &p, int n)
    {
        vector<int> a(n + 1, 0);
        int c = 2;
        int next;
        while (c <= n && c) {
            next = 0;
            for (int i = c + 1; i <= n; ++i) {
                if (i % c == 0)
                    a[i] = 1;
                else if (!next)
                    next = i;
            }
            c = next;
        }
        for (int i = 2; i <= n; ++i)
            if (!a[i])
                p.push_back(i);
    }
    int c(vector<int> &p, int m, int n)
    {
        vector<int>a(p.size(), 0);
        for (int j = 2; j <= m + n; ++j) {
            int x = j;
            for (int i = 0; i < p.size() && x > 1; ++i) {
                while (x % p[i] == 0) {
                    a[i]++;
                    x = x / p[i];
                }
            }
        }
        for (int j = 2; j <= m; ++j) {
            int x = j;
            for (int i = 0; i < p.size() && x > 1; ++i) {
                while (x % p[i] == 0) {
                    a[i]--;
                    x = x / p[i];
                }
            }
        }
        for (int j = 2; j <= n; ++j) {
            int x = j;
            for (int i = 0; i < p.size() && x > 1; ++i) {
                while (x % p[i] == 0) {
                    a[i]--;
                    x = x / p[i];
                }
            }
        }
        int ans = 1;
        for (int i = 0; i < a.size(); ++i) {
            for (int j = 0; j < a[i]; ++j) {
                ans *= p[i];
            }
        }
        return ans;
    }
public:
    int uniquePaths(int m, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        vector<int>p;
        get_prime(p, 200);
        return c(p, m - 1, n - 1);
    }
};