class Solution {
    void solve(vector<string> &ans, string &s, int p, string res, int cnt)
	{
		if (p == s.size() && cnt == 4) {
			ans.push_back(res);
			return;
		}
		if (cnt == 4)
			return;
		if ( (4 - cnt) * 3 < s.size() - p)
			return;
		
		string tmp = res;
		if (s[p] == '0') {
			tmp += "0";
			if (cnt != 3)
				tmp += '.';
			solve(ans, s, p + 1, tmp, cnt + 1);
			return;
		}
		//1 bit
		tmp += s[p];
		if (cnt != 3) {
			tmp += '.';
		}
		solve(ans, s, p + 1, tmp, cnt + 1);
		//2 bits
		tmp = res;
		if (p + 1 >= s.size() )
			return;
		tmp += s[p];
		tmp += s[p + 1];
		if  (cnt != 3) {
			tmp += '.';
		}
		solve(ans, s, p + 2, tmp, cnt + 1);
		//3 bits
		char a[4];
		if (p + 2 >= s.size() ) 
			return;
		for (int i = 0; i < 3; ++i)
			a[i] = s[p + i];
		a[3] = 0;
		int t;
		sscanf(a, "%d", &t);
		if (t <= 255) {
			tmp = res + string(a);
			if (cnt != 3)
				tmp += '.';
			solve(ans, s, p + 3, tmp, cnt + 1);
		}
	}
public:
    vector<string> restoreIpAddresses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<string>ans;
        if (s.size() > 12)
        	return ans;
        solve(ans, s, 0, string(""), 0);
        return ans;
    }
};