class Solution {
	int search(int *a, int l1, int r1, int *b, int l2, int r2, int k)
	{
		if (l1 > r1) return b[l2 + k - 1];
		if (l2 > r2) return a[l1 + k - 1];
		int m1 = (l1 + r1) >> 1;
		int m2 = (l2 + r2) >> 1;
		if (a[m1] == b[m2]) {
			if (k > m1 - l1 + m2 - l2 && k <= m1 - l1 + m2 - l2 + 2) {
				return a[m1];
			} else if (k <= m1 - l1 + m2 - l2) {
				return search(a, l1, m1 - 1, b, l2, m2 - 1, k);
			} else {
				return search(a, m1 + 1, r1, b, m2 + 1, r2, k - (m1 - l1 + m2 - l2 + 2));
			}
		} else if (a[m1] < b[m2]) {
			if (k < m1 - l1 + m2 - l2 + 2) {
				return search(a, l1, r1, b, l2, m2 - 1, k);
			} else {
				return search(a, m1 + 1, r1, b, l2, r2, k - (m1 - l1 + 1));
			}
		} else {
			if (k < m1 - l1 + m2 - l2 + 2) {
				return search(a, l1, m1 - 1, b, l2, r2, k);
			} else {
				return search(a, l1, r1, b, m2 + 1, r2, k - (m2 - l2 + 1));
			}
		}
	}
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        if ((m + n) % 2 == 0) {
        	return (search(A, 0, m - 1, B, 0, n - 1, (m + n) / 2) +
        			search(A, 0, m - 1, B, 0, n - 1, (m + n) / 2 + 1)) / 2.0;
        } else {
        	return search(A, 0, m - 1, B, 0, n - 1, (m + n + 1) / 2);
        }
    }
};
