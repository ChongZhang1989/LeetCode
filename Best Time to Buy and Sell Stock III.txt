class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (prices.size() < 2)
            return 0;
    	vector<int>a;
    	for (int i = 1; i < prices.size(); ++i) {
    		a.push_back(prices[i] - prices[i - 1]);
    	}
    	int n = a.size();
    	vector<int>dp1(n, 0);
    	vector<int>dp2(n, 0);
    	int sum = 0;
    	int globalmax = 0;
    	for (int i = 0; i < n; ++i) {
    		sum = max(sum + a[i], 0);
    		globalmax = max(globalmax, sum);
    		dp1[i] = globalmax;
    	}
    	sum = 0;
    	globalmax = 0;
    	for (int i = n - 1; i >= 0; --i) {
    		sum = max(sum + a[i], 0);
    		globalmax = max(sum, globalmax);
    		dp2[n - 1 - i] = globalmax;
    	}
    	for (int i = 0; i < n - 1; ++i) {
    		globalmax = max(dp1[i] + dp2[n - 1 - i - 1], globalmax);
    	}
    	return globalmax;
    }
};