class Solution {
public:
    int minDistance(string word1, string word2) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = word1.size();
        int m = word2.size();
        if (n == 0)
            return m;
        if (m == 0)
        	return n;
        vector<vector<int> > dp(n, vector<int>(m));
        dp[0][0] = (word1[0] == word2[0] ? 0 : 1);
        for (int i = 1; i < m; ++i) {
        	dp[0][i] = (word1[0] == word2[i] ? 0 : 1) + i;
        	dp[0][i] = min(dp[0][i - 1] + 1, dp[0][i]);
        }
        for (int i = 1; i < n; ++i) {
        	dp[i][0] = (word1[i] != word2[0]) + i;
        	dp[i][0] = min(dp[i - 1][0] + 1, dp[i][0]);
        }
        for (int i = 1; i < n; ++i) {
        	for (int j = 1; j < m; ++j) {
        		dp[i][j] = dp[i - 1][j - 1] + (word1[i] == word2[j] ? 0 : 1);
        		dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);
        		dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j]);
        	}
        }
        return dp[n - 1][m - 1];
    }
};