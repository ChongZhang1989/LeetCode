class Solution {
    bool palindrome(vector<vector<int> > &p, string &s, int l, int r)
	{
		if (p[l][r] != -1)
			return (bool)p[l][r];
		int x = l, y = r;
		while (l < r) {
			if (p[l][r] != -1)
				return p[x][y] = p[l][r];
			if (s[l++] != s[r--])
				return p[x][y] = false;
		}
		return p[x][y] = true;
	}
	int solve(vector<vector<int> > &p, string &s, vector<int> &dp, int n)
	{
		if (dp[n] != -1)
			return dp[n];
		if (palindrome(p, s, 0, n)) {
			return dp[n] = 0;
		}
		int mincut = n;
		for (int i = 0; i <= n - 1; ++i) {
			if (palindrome(p, s, i + 1, n)) {
				mincut = min(mincut, solve(p, s, dp, i) + 1);
			}
		}
		return dp[n] = mincut;
	}
public:
    int minCut(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = s.size();
        vector<int>dp(s.size(), -1);
        vector<vector<int> >p(n, vector<int>(n, -1) );
        return solve(p, s, dp, s.size() - 1);
    }
};