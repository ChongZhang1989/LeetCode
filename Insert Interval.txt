/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
    void merge(vector<Interval> &ans, Interval &interval)
    {
        if (!ans.size()) {
            ans.push_back(interval);
            return;
        }
        int n = ans.size() - 1;
        if (ans[n].end >= interval.start) {
            ans[n].end = max(ans[n].end, interval.end);
        } else {
            ans.push_back(interval);
        }
    }
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        vector<Interval> ans;
        int flg = 0;
        for (int i = 0; i < intervals.size(); ++i) {
            if (newInterval.start < intervals[i].start && !flg) {
                merge(ans, newInterval);
                flg = 1;
                --i;
            } else {
                merge(ans, intervals[i]);
            }
        }
        if (!flg) merge(ans, newInterval);
        return ans;
    }
};